<!DOCTYPE html>
<html lang="en">
<head>
    <title>Cockpitdecks Button Designer</title>
<style type="text/css">
body {
    font-family: sans-serif;
}
#render, #design {
    display: block;
    float: left;
}
#render {
    width: 520px;
    height: 520px;
}
pre {
    font-size: small;
}
</style>
<script src="/assets/js/konva.js" type="text/javascript"></script>
<script src="/assets/js/js-yaml.js" type="text/javascript"></script>
</head>
<body>
    <div id="render">
    </div>
    <div id="design">
        <form id="parameters">

            <fieldset>
                <legend>Deck</legend>
                <label>Deck model</label>
                <select name="deck">
                {% for deck in assets.decks %}
                    <option value="{{ deck.name }}">{{ deck.name }} ({{ deck.type }})</option>
                {% endfor %}
                </select>
            </fieldset>

            <fieldset>
                <legend>Button</legend>
                <label>Index</label>
                <input type="text" name="index" size="10"/>
                <label>Name</label>
                <input type="text" name="index" size="40"/>
            </fieldset>

            <fieldset>
                <legend>Activation</legend>
                <label>Type</label>
                <select id="activation-type" name="type" onchange="load_activation_parameters();">
                {% for activation in assets.activations %}
                    <option value="{{ activation }}">{{ activation }}</option>
                {% endfor %}
                </select>
                <div><pre id="activation-details">Activation parameters</pre></div>
            </fieldset>

            <fieldset>
                <legend>Representation</legend>
                <label>Type</label>
                <select id="representation-type" name="type" onchange="load_representation_parameters();">
                {% for representation in assets.representations %}
                    <option value="{{ representation }}">{{ representation }}</option>
                {% endfor %}
                </select>
                <div><pre id="representation-details">Representation parameters</pre></div>
            </fieldset>

            <fieldset>
                <legend>Code</legend>
                <br/>
                <textarea id="code" name="code" rows="40" cols="60">
index: 0
name: CSTR
type: push
annunciator:
  size: small
  model: B
  parts:
    B0:
      color: lime
      led: bars
      dataref: AirbusFBW/OHPLightsATA31[16]
      # formula: ${AirbusFBW/NDShowCSTRCapt}
    B1:
      text: CSTR
      text-size: 40
      text-font: DIN Bold
      formula: "1"
command: toliss_airbus/dispcommands/CaptCstrPushButton
view: SRS/X-Camera/Select_View_ID_1
</textarea>
            <br/>
            <button id="run" onclick="render();">Render</button>
            <button id="save" onclick="render();">Save</button>
            <br/>
            <textarea id="yaml" name="yaml" rows="40" cols="60" readonly=true></textarea>
        </form>
        <br>
        <p style="font-size: small;">Status: <span id="status">ok</span></p>
    </div>
<script type="text/javascript">
//
//
// Konva layout set up and initialisation
//
const DEBUG = false

// Prevent form submit
document.querySelector("#run").addEventListener(
  "click",
  function (event) {
    event.preventDefault();
  },
  false,
);

// create stage
var stage = new Konva.Stage({
    container: "render",
    width: 512,
    height: 512,
});
var image_layer = new Konva.Layer({name: "image"});
stage.add(image_layer);
var status_line = document.getElementById("status");
var yaml_block = document.getElementById("yaml")

// define function
//
// utility function
//
function display_image(image) {
    let buttonImage = new Image();
    buttonImage.onload = function () {
        let button = new Konva.Image({
            x: 0,
            y: 0,
            image: buttonImage
        });
        image_layer.add(button);
    };
    buttonImage.src = "data:image/jpeg;base64," + image;
}

function collect_form(form_name) {
    let form = document.getElementById(form_name);
    let formData = new FormData(form);
    return Object.fromEntries(formData)
}


//
// Event handler for form
//
function render() {
    let data = collect_form("parameters");
    generate_yaml();

    fetch("/button", {
      method: "POST",
      headers: {"Content-Type": "application/json"}, 
      body: JSON.stringify(data)
    })
    .then(r =>  r.json().then(image => {
        if (image.meta != undefined && image.meta.error != undefined) {
            status_line.innerHTML = image.meta.error
        }
        if (image.image != "") {
            display_image(image.image);
            status_line.style["color"] = "#000000";
        } else {
            status_line.style["color"] = "#ff0000";
        }
    }));
    return false;
}


function generate_yaml() {
    let data = collect_form("parameters")

    console.log("jsyaml", jsyaml)
    yaml_block.innerHTML = data.code
}


let activation_elem = document.getElementById("activation-type");
activation_elem.onchange = (e) => {
    let activation = activation_elem.value

    fetch("/activation?" + new URLSearchParams({name: activation}).toString())
    .then(r =>  r.json().then(details => {
        console.log(details);
        let details_elem = document.getElementById("activation-details");
        details_elem.innerHTML = JSON.stringify(details, null, 2);
    }));
    return false;
};

let representation_elem = document.getElementById("representation-type");
representation_elem.onchange = (e) => {
    let representation = representation_elem.value

    fetch("/representation?" + new URLSearchParams({name: representation}).toString())
    .then(r =>  r.json().then(details => {
        console.log(details);
        let details_elem = document.getElementById("representation-details");
        details_elem.innerHTML = JSON.stringify(details, null, 2);
    }));
    return false;
};
</script>
</body>
</html>