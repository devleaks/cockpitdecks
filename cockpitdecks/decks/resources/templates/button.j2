<!DOCTYPE html>
<html lang="en">
<head>
    <title>Cockpitdecks Button Designer</title>
<style type="text/css">
body {
    font-family: sans-serif;
}
#preview, #design {
    display: block;
    float: left;
}
#preview {
    width: 520px;
    height: 520px;
}
pre {
    font-size: small;
}
.maxwidth {
    font-size: small;
    max-width: 600px;
}
</style>
<script src="/assets/js/konva.js" type="text/javascript"></script>
<script src="/assets/js/yaml.js" type="text/javascript"></script>
<script src="/assets/js/button.js" type="text/javascript"></script>
</head>
<body>
    <div id="preview">
    </div>
    <div id="design">
        <form id="parameters">

            <fieldset>
                <legend>Deck</legend>
                <label>Deck model</label>
                <select id="deck" name="deck">
                {% for deck in assets.decks %}
                    <option value="{{ deck.name }}">{{ deck.name }} ({{ deck.type }})</option>
                {% endfor %}
                </select>
                <br/>
                <label>Layout Name</label>
                <input type="text" name="layout" size="20"/>
                <br/>
                <label>Page Name</label>
                <input type="text" name="page" size="20"/>
            </fieldset>

            <fieldset>
                <legend>Button</legend>
                <label>Index</label>
                <select id="index" name="index">
                </select>

                <label>Name</label>
                <input type="text" name="button-name" size="40"/>
                <div id="button-description"></div>
            </fieldset>

            <fieldset>
                <legend>Activation</legend>
                <label>Type</label>
                <select id="activation-type" name="type">
                {% for activation in assets.activations %}
                    <option value="{{ activation }}">{{ activation }}</option>
                {% endfor %}
                </select>
                <div id="activation-details"></div>
                <div class="maxwidth"><p id="activation-description"></p></div>
            </fieldset>

            <fieldset>
                <legend>Representation</legend>
                <label>Type</label>
                <select id="representation-type" name="view">
                {% for representation in assets.representations %}
                    <option value="{{ representation }}">{{ representation }}</option>
                {% endfor %}
                </select>
                <div id="representation-details"></div>
                <div class="maxwidth"><p id="representation-description"></p></div>
            </fieldset>

            <fieldset>
                <button id="run"  name="action" value="render">Render</button>
                <button id="save" name="action" value="save">Save</button>
                <br/>
                <legend>Code</legend>
                <br/>
                <textarea id="code" name="code" rows="40" cols="60">
index: 0
name: CSTR
type: push
annunciator:
  size: small
  model: B
  parts:
    B0:
      color: lime
      led: bars
      dataref: AirbusFBW/OHPLightsATA31[16]
      # formula: ${AirbusFBW/NDShowCSTRCapt}
    B1:
      text: CSTR
      text-size: 40
      text-font: DIN Bold
      formula: "1"
command: toliss_airbus/dispcommands/CaptCstrPushButton
view: SRS/X-Camera/Select_View_ID_1
</textarea>
            <br/>
            <textarea id="yaml" name="yaml" rows="40" cols="60" readonly=true></textarea>
        </form>
        <br>
        <div id="status-bar" style="border: 1px solid grey;">
            <p style="font-size: small;">Status: <span id="status">ok</span></p>
        </div>
    </div>
<script type="text/javascript">
//
//
// Konva layout set up and initialisation
//
const DEBUG = false
const ASSETS = {{ assets|tojson(indent=2) }};

// create stage
var stage = new Konva.Stage({
    container: "preview",
    width: 512,
    height: 512,
});
var image_layer = new Konva.Layer({name: "image"});
stage.add(image_layer);
var status_line = document.getElementById("status");
var yaml_block = document.getElementById("yaml")

var activation_details; // global
var representation_details; // global

// Utility functions
//
function collectForm(form_name) {
    let form = document.getElementById(form_name);
    let formData = new FormData(form);
    return Object.fromEntries(formData)
}

function removeOptions(selectElement) {
   var i, L = selectElement.options.length - 1;
   for(i = L; i >= 0; i--) {
      selectElement.remove(i);
   }
}

function cleanElement(el) {
    while(el.firstChild){
        el.removeChild(el.firstChild);
    }
}

// Event handler for form
//
document.getElementById("run").addEventListener(
    "click",
    function (event) {
        // Prevent form submit
        event.preventDefault();
        let data = collectForm("parameters");
        generateYaml(data, yaml_block, activation_details, representation_details);

        fetch("/button", {
          method: "POST",
          headers: {"Content-Type": "application/json"}, 
          body: JSON.stringify(data)
        })
        .then(r =>  r.json().then(image => {
            if (image.meta != undefined && image.meta.error != undefined) {
                status_line.innerHTML = image.meta.error
                console.log("image", image.meta)
            }
            if (image.image != "") {
                let buttonImage = new Image();
                buttonImage.onload = function () {
                    let button = new Konva.Image({
                        x: 0,
                        y: 0,
                        image: buttonImage
                    });
                    image_layer.add(button);
                };
                buttonImage.src = "data:image/jpeg;base64," + image.image;
                status_line.style["color"] = "#000000";
            } else {
                status_line.style["color"] = "#ff0000";
            }
            document.getElementById("activation-description").innerHTML = image.meta["activation-desc"]
            document.getElementById("representation-description").innerHTML = image.meta["representation-desc"]
        }));
    },
    false,
);

document.getElementById("save").addEventListener(
  "click",
  function (event) {
    event.preventDefault();
  },
  false,
);

let activation_elem = document.getElementById("activation-type");
activation_elem.onchange = (e) => {
    let activation = activation_elem.value

    fetch("/activation?" + new URLSearchParams({name: activation}).toString())
    .then(r =>  r.json().then(details => {
        let details_elem = document.getElementById("activation-details");
        // console.log(details);
        document.getElementById("activation-description").innerHTML = ""
        activation_details = details
        makeForm(activation_details, details_elem)
    }));
    return false;
};

let representation_elem = document.getElementById("representation-type");
representation_elem.onchange = (e) => {
    let representation = representation_elem.value

    fetch("/representation?" + new URLSearchParams({name: representation}).toString())
    .then(r =>  r.json().then(details => {
        let details_elem = document.getElementById("representation-details");
        // console.log(details);
        document.getElementById("representation-description").innerHTML = ""
        representation_details = details
        makeForm(details, details_elem)
    }));
    return false;
};

let deck_elem = document.getElementById("deck");
let index_elem = document.getElementById("index");
index_elem.onchange = (e) => {
    let deck = deck_elem.value
    let index = index_elem.value

    fetch("/button_details?" + new URLSearchParams({deck: deck, index: index}).toString())
    .then(r =>  r.json().then(details => {
        // console.log("button details", details);
        // Activations
        removeOptions(activation_elem);
        // Add new options
        details.activations.forEach(i => {
            var opt = document.createElement("option");
            opt.value = i;
            opt.innerHTML = i;
            activation_elem.appendChild(opt);
        });
        if (activation_elem.value != "none") {
            activation_elem.value = "none"
        } else {
            activation_elem.dispatchEvent(new Event("change"));
        }

        // Activations
        removeOptions(representation_elem);
        // Add new options
        details.representations.forEach(i => {
            var opt = document.createElement("option");
            opt.value = i;
            opt.innerHTML = i;
            representation_elem.appendChild(opt);
        });
        if (representation_elem.value != "none") {
            representation_elem.value = "none"
        } else {
            representation_elem.dispatchEvent(new Event("change"));
        }
    }));
    return false;
};

deck_elem.onchange = (e) => {
    let deck = deck_elem.value

    fetch("/deck_indices?" + new URLSearchParams({name: deck}).toString())
    .then(r =>  r.json().then(details => {
        // console.log("deck indices", details);
        removeOptions(index_elem);
        // Add new options
        details.indices.forEach(i => {
            var opt = document.createElement("option");
            opt.value = i;
            opt.innerHTML = i;
            index_elem.appendChild(opt);
        });
        if (index_elem.options.length > 0) {
            index_elem.value = index_elem.options[0].value
            index_elem.dispatchEvent(new Event("change"));
        }
    }));
    return false;
};

// trigger it on start, will cascade to index, activation, and representation
deck_elem.dispatchEvent(new Event("change"));
</script>
</body>
</html>