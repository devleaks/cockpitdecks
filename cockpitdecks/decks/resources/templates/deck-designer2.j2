<!DOCTYPE html>
<html>
<head>
    <title>Cockpitdecks - Deck Designer</title>
    <meta name="apple-mobile-web-app-capable" content="yes">
<style type="text/css">
body {
    width: 100%;
    height: 100%;
    margin: 0;
    padding: 0;
    font-family: sans-serif;
}

.deck {
    width: inherit;
    height: inherit;
    display: block;
    margin: 0;
    padding: 0;
}
</style>
</head>
<body>
    <div id="deck" class="deck"></div>
    <button id="butrect">Button (rect)</button>
    <button id="butround">Button (round)</button>
    <button id="encoder">Encoder</button>
    <button id="hardware">Hardware</button>
    <button id="save">Save</button>
    <button id="load">Load</button>
<script src="/assets/js/konva.js" type="text/javascript"></script>
<script src="/assets/js/deck-designer.js" type="text/javascript"></script>
<script type="text/javascript">
//
//
// Konva layout set up and initialisation
//
// create and add <div id="deck"></div> with proper styling, add to document
const DEBUG = false
const DECK_ELEMID = "deck"
const DECK_BACKGROUND_IMAGE_PATH = "/assets/decks/images/"

var deck_elem = document.getElementById(DECK_ELEMID);
// deck_elem.setAttribute("id", DECK_ELEMID);
// deck_elem.setAttribute("width", "inherit");
// deck_elem.setAttribute("height", "inherit");
// deck_elem.setAttribute("display", "block");
// deck_elem.setAttribute("padding", 0);
// deck_elem.setAttribute("marging", 0);
// document.getElementsByTagName("body")[0].appendChild(deck_elem)

// create stage
var stage = new Konva.Stage({
    container: DECK_ELEMID,
    width: window.innerWidth,
    height: window.innerHeight,
});

// create layers to cleanly separate content by function
var hardware_layer = new Konva.Layer({name: "hardware"});       // Where Cockpitdecks draws its icons/images
var interaction_layer = new Konva.Layer({name: "interaction"}); // Shapes with events attached to it

// add the layer to the stage
stage.add(hardware_layer);
stage.add(interaction_layer);

var transformer = new Konva.Transformer({rotateEnabled: false, ignoreStroke: true});
interaction_layer.add(transformer);

// Add bacground image and resize deck around it.
// Resize window as well. Cannot get rid of top bar... (adds 24px)
function add_background() {
    let background_layer = new Konva.Layer({name: "background"});   // Background image or iniform color
    stage.add(background_layer);
    background_layer.moveToBottom();

    const extra_space = 150;

    let deckImage = new Image();
    deckImage.onerror = function() {
        console.log("cannot load background image");
    }
    deckImage.onload = function () {
        let deckbg = new Konva.Image({
            x: 0,
            y: 0,
            image: deckImage
        });
        stage.width(deckImage.naturalWidth);
        stage.height(deckImage.naturalHeight);
        window.resizeTo(deckImage.naturalWidth, deckImage.naturalHeight + extra_space);
        background_layer.add(deckbg);

        let background_interactor = new Konva.Rect({
            x: 0,
            y: 0,
            width: deckImage.naturalWidth,
            height: deckImage.naturalHeight,
            name: "background"
        });
        background_interactor.on('click', function () {
            transformer.nodes([]);
        });
        background_layer.add(background_interactor);
    };

    deckImage.src = DECK_BACKGROUND_IMAGE_PATH + "a321neo.overhead.png";
}

add_background()

const SIZE = 50
const INITIAL_POSITION = {x: 100, y: 100}

document.getElementById("hardware").addEventListener(
    "click",
    function (event) {
        event.preventDefault();
        let shape = new Konva.Rect({
            x: INITIAL_POSITION.x,
            y: INITIAL_POSITION.y,
            width: SIZE,
            height: SIZE,
            cornerRadius: 0,
            stroke: "#00ff00",
            strokeWidth: 1,
            strokeScaleEnabled: false,
            draggable: true,
            name: "hardware"
        });
        hardware_layer.add(shape);

        shape.on('dblclick', function () {
            transformer.nodes([shape]);
        });
        shape.on('transform', function () {
            console.log()
            shape.strokeWidth(1);
        });

    },
    false,
);

document.getElementById("butrect").addEventListener(
    "click",
    function (event) {
        event.preventDefault();
        let shape = new Konva.Rect({
            x: INITIAL_POSITION.x,
            y: INITIAL_POSITION.y,
            width: SIZE,
            height: SIZE,
            cornerRadius: 4,
            stroke: "blue",
            strokeWidth: 1,
            strokeScaleEnabled: false,
            draggable: true,
            name: "button"
        });
        interaction_layer.add(shape);

        shape.on('dblclick', function () {
            transformer.nodes([shape]);
        });

    },
    false,
);

document.getElementById("butround").addEventListener(
    "click",
    function (event) {
        event.preventDefault();
        let shape = new Konva.Circle({
            x: INITIAL_POSITION.x,
            y: INITIAL_POSITION.y,
            radius: Math.floor(SIZE / 2),
            stroke: "blue",
            strokeWidth: 1,
            strokeScaleEnabled: false,
            draggable: true,
            name: "button"
        });
        interaction_layer.add(shape);

        shape.on('dblclick', function () {
            transformer.nodes([shape]);
        });

    },
    false,
);

document.getElementById("encoder").addEventListener(
    "click",
    function (event) {
        event.preventDefault();
        let shape = new Konva.Circle({
            x: INITIAL_POSITION.x,
            y: INITIAL_POSITION.y,
            radius: Math.floor(SIZE / 2),
            stroke: "yellow",
            strokeWidth: 1,
            strokeScaleEnabled: false,
            draggable: true,
            name: "encoder"
        });
        interaction_layer.add(shape);

        shape.on('dblclick', function () {
            transformer.nodes([shape]);
        });

    },
    false,
);

document.getElementById("save").addEventListener(
    "click",
    function (event) {
        event.preventDefault();
        console.log(stage.toJSON())

        fetch("/deck-designer-io", {
          method: "POST",
          headers: {"Content-Type": "application/json"}, 
          body: stage.toJSON()
        })
        .then(r =>  r.json().then(status => {
            console.log("status", status)
        }));
        return false;
    },
    false,
);

function cleanElement(el) {
    while(el.firstChild){
        el.removeChild(el.firstChild);
    }
}

document.getElementById("load").addEventListener(
    "click",
    function (event) {
        event.preventDefault();
        console.log(stage.toJSON())

        fetch("/deck-designer-io")
        .then(r =>  r.json().then(code => {
            console.log("code", code)
            cleanElement(DECK_ELEMID)
            stage = Konva.Node.create(JSON.stringify(code), DECK_ELEMID);
            console.log("layers", stage.getLayers())
            add_background()
        }));
        return false;
    },
    false,
);

</script>
</body>
</html>