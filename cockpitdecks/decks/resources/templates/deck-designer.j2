<!DOCTYPE html>
<html>
<head>
    <title>Cockpitdecks - Deck Designer</title>
    <meta name="apple-mobile-web-app-capable" content="yes">
    <link href="/assets/fonts/d-din.css" rel="stylesheet" />
<style type="text/css">
body {
    width: 100%;
    height: 100%;
    margin: 0;
    padding: 0;
    font-family: sans-serif;
}
#deck {
    width: inherit;
    height: inherit;
    display: block;
    margin: 0;
    padding: 0;
}
</style>
</head>
<body>
    <div id="deck"></div>
    <button id="butrect">Button (rectangular)</button>
    <button id="butround">Button (round)</button>
    <button id="encoder">Encoder</button>
    <button id="hardware">Hardware</button>
    <button id="label">Show/Hide Label</button>
    <button id="save">Save</button>
    <button id="load">Load</button>
<script src="/assets/js/konva.js" type="text/javascript"></script>
<script src="/assets/js/deck-designer.js" type="text/javascript"></script>
<script type="text/javascript">
//
//
// Konva layout set up and initialisation
//
// create and add <div id="deck"></div> with proper styling, add to document
const DEBUG = false;
const DECK_ELEMID = "deck";
const DECK_BACKGROUND_IMAGE_PATH = "";
const OPTIONS = {{ designer_config|tojson(indent=2) }};
const DECK_TYPE_DESCRIPTION = "deck-type-flat";
const DECK = {{ deck|tojson(indent=2) }};
const DECK_BACKGROUND_IMAGE = DECK[DECK_TYPE_DESCRIPTION].background.image;

// try to install background image as CSS background image (more efficient)
var deck_elem = document.getElementById(DECK_ELEMID);
deck_elem.style.backgroundImage = "url("+DECK_BACKGROUND_IMAGE_PATH+DECK_BACKGROUND_IMAGE+")";
deck_elem.style.backgroundRepeat = "no-repeat";

// create stage
var stage = new Konva.Stage({
    container: DECK_ELEMID,
    width: window.innerWidth,
    height: window.innerHeight,
});

// create layers to cleanly separate content by function
var background_layer = new Konva.Layer({name: "background"});   // Background image or iniform color
var interaction_layer = new Konva.Layer({name: "interaction"}); // Shapes with events attached to it

// add the layer to the stage
stage.add(background_layer);
stage.add(interaction_layer);

var transformer;
//
// Utility function
//
function get_option(dict, path, dflt) {
    let path_arr = path
    if (! (path_arr instanceof Array)) {
        path_arr = path.split(".");
    }
    console.log("testing", dict, path, path_arr);
    if (path_arr.length == 1) {
        console.log("1", dict, path_arr[0]);
        if (dict[path_arr[0]] == undefined) {
            console.log("returning default", dflt);
            return dflt
        } else {
            console.log("returning value", path_arr[0], dict[path_arr[0]]);
            return dict[path_arr[0]];
        }
    }
    if (dict[path_arr[0]] != undefined) {
        console.log("keep searching", dict[path_arr[0]], path_arr.slice(1));
        return get_option(dict[path_arr[0]], path_arr.slice(1), dflt);
    }
    console.log("returning default", dflt);
    return dflt;
}

function add_transformer() {
    transformer = new Konva.Transformer({rotateEnabled: false, ignoreStroke: true});
    interaction_layer.add(transformer);
    console.log("transformer added")
}

// Load background image and resize deck around it.
// Resize window as well.
function add_background() {
    const extra_space = 150;

    let deckImage = new Image();
    deckImage.onerror = function() {
        console.log("cannot load background image");
    }
    deckImage.onload = function () {
        // let deckbg = new Konva.Image({
        //     x: 0,
        //     y: 0,
        //     image: deckImage
        // });
        stage.width(deckImage.naturalWidth);
        stage.height(deckImage.naturalHeight);
        window.resizeTo(deckImage.naturalWidth, deckImage.naturalHeight + extra_space);
        // background_layer.add(deckbg);

        let background_interactor = new Konva.Rect({
            x: 0,
            y: 0,
            width: deckImage.naturalWidth,
            height: deckImage.naturalHeight,
            name: "background"
        });
        background_interactor.on("click", function () {
            transformer.nodes([]);
        });
        background_layer.add(background_interactor);
        background_layer.moveToBottom();
    };

    deckImage.src = DECK_BACKGROUND_IMAGE_PATH + DECK_BACKGROUND_IMAGE;
    console.log("background added")
}

function cleanElement(el) {
    while(el.firstChild){
        el.removeChild(el.firstChild);
    }
}

//
// Main
//
add_background()
add_transformer()

//
// Interactors
//
function label_editor(that_stage, label, shape) {
    // https://konvajs.org/docs/sandbox/Editable_Text.html

    // create textarea over canvas with absolute position

    // first we need to find position for textarea
    // how to find it?

    // at first lets find position of text node relative to the stage:
    let textPosition = label.getAbsolutePosition();

    // then lets find position of stage container on the page:
    let stageBox = that_stage.container().getBoundingClientRect();

    // so position of textarea will be the sum of positions above:
    let areaPosition = {
      x: stageBox.left + textPosition.x,
      y: stageBox.top + textPosition.y,
    };

    // create textarea and style it
    let textarea = document.createElement("textarea");
    document.body.appendChild(textarea);

    textarea.value = label.text();
    textarea.style.position = "absolute";
    textarea.style.top = areaPosition.y + "px";
    textarea.style.left = areaPosition.x + "px";
    textarea.style.width = label.width();

    textarea.focus();

    textarea.addEventListener("keydown", function (e) {
        // hide on enter
        if (e.key == "Enter") {
            label.text(textarea.value);
            label.getParent().name(textarea.value);
            document.body.removeChild(textarea);

            // tries to center label over shape
            if (shape !== false && shape != undefined) {
                let transform = shape.getAbsoluteTransform();
                let matrix = transform.getMatrix();
                label.x(shape.x() + (shape.width() * matrix[0] - label.width()) / 2)
            } else {
                console.log("no shape")
            }

        }
    });
}

// https://stackoverflow.com/questions/4361242/extract-rotation-scale-values-from-2d-transformation-matrix
function decompose_2d_matrix(mat) {
  var a = mat[0];
  var b = mat[1];
  var c = mat[2];
  var d = mat[3];
  var e = mat[4];
  var f = mat[5];

  var delta = a * d - b * c;

  let result = {
    translation: [e, f],
    rotation: 0,
    scale: [0, 0],
    skew: [0, 0],
  };

  // Apply the QR-like decomposition.
  if (a != 0 || b != 0) {
    var r = Math.sqrt(a * a + b * b);
    result.rotation = b > 0 ? Math.acos(a / r) : -Math.acos(a / r);
    result.scale = [r, delta / r];
    result.skew = [Math.atan((a * c + b * d) / (r * r)), 0];
  } else if (c != 0 || d != 0) {
    var s = Math.sqrt(c * c + d * d);
    result.rotation =
      Math.PI / 2 - (d > 0 ? Math.acos(-c / s) : -Math.acos(c / s));
    result.scale = [delta / s, s];
    result.skew = [0, Math.atan((a * c + b * d) / (s * s))];
  } else {
    // a = b = c = d = 0
  }

  return result;
}

function reset_transforms() {
    function basename(path) {
        return path.split('/').reverse()[0];
    }
    let output = [];
    stage.getLayers().forEach( (layer) => {
        // console.log("layer", layer)
        if (layer.name() == "background") {
            // console.log("reset_transforms skipping ", layer.name())
            return;
        }
        layer.getChildren().forEach( (group) => {
            // console.log("group", group)
            if (group instanceof Konva.Transformer) {
                // console.log("reset_transforms skipping transformer", group.name())
                return;
            }
            if (group instanceof Konva.Group) {
                group.getChildren().forEach( (shape) => {
                    // console.log("shape", shape)
                    if (["Rect", "Circle"].indexOf(shape.className) > -1) {
                        let transform = shape.getAbsoluteTransform();
                        let matrix = transform.getMatrix();
                        let summary = decompose_2d_matrix(matrix)
                        console.log("installed transformer", group.name(), shape.name(), summary)

                        let button;
                        if (shape.className == "Rect") {
                            button = {
                                name: group.name(),
                                action: ["push"],
                                feedback: "image",
                                dimension: [Math.round(shape.attrs.width * summary.scale[0]), Math.round(shape.attrs.height * summary.scale[1])],
                                layout: {
                                    offset: [Math.round(summary.translation[0]), Math.round(summary.translation[1])]
                                }
                            };
                            if (shape.attrs.name == "hardware") {
                                button.layout.hardware = "hardware";
                            }
                        } else if (shape.className == "Circle") {
                            radius = shape.attrs.radius;
                            button = {
                                name: group.name(),
                                action: ["encoder", "push"],
                                dimension: Math.round(radius * summary.scale[0]),
                                layout: {
                                    offset: [Math.round(summary.translation[0]), Math.round(summary.translation[1])]
                                }
                            };
                            if (shape.attrs.name == "button") {
                                button.feedback = "image";
                            }
                        }
                        output.push(button);
                    }
                });
            } else {
                ; // console.log("not a group", group.className)   
            }
        });
    });
    name = basename(DECK_BACKGROUND_IMAGE)
    return {
        name: name.replace(/\.[^/.]+$/, ""),
        driver: "virtualdeck",
        background: {
            image: name
        },
        buttons: output
    };
}


class Interactor extends Konva.Group {
    // This is a combination of a rect or circle that can be transformed
    // and a text "label" or name that can be edited.

    constructor(what, color, fillColor) {

        let name = what;
        if (name.startsWith("but")) {
            name = "button"
        }

        const INIT_TEXT = get_option(OPTIONS, what+".label", get_option(OPTIONS, "label.text", name+ " name"));

        const LABEL_SIZE = get_option(OPTIONS, "label.size", 10);
        const LABEL_FONT = get_option(OPTIONS, "label.font", "Helvetica");
        const LABEL_COLOR = get_option(OPTIONS, "label.color", "white");

        const SIZE = get_option(OPTIONS, what+".size", 50);
        const INITIAL_POSITION = {x: 100, y: 100} // get_option(OPTIONS, "initial-position", {x: 100, y: 100});

        super({name: INIT_TEXT, draggable: true});

        let shape;
        if (["butrect", "hardware"].indexOf(what) > -1) {
            shape = new Konva.Rect({
                x: INITIAL_POSITION.x,
                y: INITIAL_POSITION.y,
                width: SIZE,
                height: SIZE,
                cornerRadius: what == "hardware" ? 0 : 4,
                fill: get_option(OPTIONS, what+".fill-color", fillColor != undefined ? fillColor : "#ffffff20"),
                stroke: get_option(OPTIONS, what+".stroke-color", color),
                strokeWidth: 1,
                strokeScaleEnabled: false,
                name: what, 
            });
        } else {
            shape = new Konva.Circle({
                x: INITIAL_POSITION.x,
                y: INITIAL_POSITION.y,
                radius: get_option(OPTIONS, what+".radius", Math.floor(SIZE / 2)),
                fill: get_option(OPTIONS, what+".fill-color", fillColor != undefined ? fillColor : "#ffffff20"),
                stroke: get_option(OPTIONS, what+".stroke-color", color),
                strokeWidth: 1,
                strokeScaleEnabled: false,
                name: what,
            });
        }     

        shape.on("dblclick dbltap", function () {
            transformer.nodes([shape]);
        });

        this.add(shape);

        let x = shape.x();
        let y = shape.y();
        if (shape instanceof Konva.Circle) {
            x -= shape.radius()
            y -= shape.radius()
        }
        let label = new Konva.Text({
            x: x,
            y: y - LABEL_SIZE - 2,
            text: INIT_TEXT,
            align: "center",
            fontFamily: LABEL_FONT,
            fontStyle: get_option(OPTIONS, "label.style", "normal"),
            fontSize: LABEL_SIZE,
            fill: get_option(OPTIONS, what+".label-color", LABEL_COLOR),
          });

        // center label over shape on start at least
        label.x(x + (shape.width() - label.width()) / 2)

        // attempt to keep label centered...
        shape.on("transformend", function () {
            let transform = shape.getAbsoluteTransform();
            let matrix = transform.getMatrix();
            label.x(x + (shape.width() * matrix[0] - label.width()) / 2)
        });

        label.on("dblclick dbltap", () => {
            label_editor(stage, label, shape);
        });

        this.add(label);
    }
}

deck_elem.tabIndex = 1;
deck_elem.focus();
deck_elem.addEventListener("keydown", function (e) {
    if (e.key == "Delete") {
        s = transformer.nodes()
        if (s.length > 0) {
            s.forEach( (x) => { x.getParent().destroy() });
        }
        transformer.nodes([]);
    }
});

document.getElementById("hardware").addEventListener(
    "click",
    function (event) {
        event.preventDefault();
        interaction_layer.add(new Interactor("hardware", "#0000ff", "#0000ff30"));
    },
    false,
);

document.getElementById("butrect").addEventListener(
    "click",
    function (event) {
        event.preventDefault();
        interaction_layer.add(new Interactor("butrect", "#00ff00", "#00ff0030"));
    },
    false,
);

document.getElementById("butround").addEventListener(
    "click",
    function (event) {
        event.preventDefault();
        interaction_layer.add(new Interactor("butround", "#00ff00", "#00ff0030"));
    },
    false,
);

document.getElementById("encoder").addEventListener(
    "click",
    function (event) {
        event.preventDefault();
        interaction_layer.add(new Interactor("encoder", "yellow", "#ffff0030"));
    },
    false,
);

document.getElementById("label").addEventListener(
    "click",
    function (event) {
        event.preventDefault();
        var shapes = stage.find('Text');
        if (shapes.length > 0) {
            visible = shapes[0].visible()
            visible = ! visible
            shapes.forEach( (s) => s.visible(visible))
        }
    },
    false,
);

document.getElementById("save").addEventListener(
    "click",
    function (event) {
        event.preventDefault();
        code = stage.toJSON();
        yaml = reset_transforms();
        out = {code: JSON.parse(code), deckconfig: yaml}
        console.log("saving code", out)

        reset_transforms()

        fetch("/deck-designer-io", {
          method: "POST",
          headers: {"Content-Type": "application/json"}, 
          body: JSON.stringify(out)
        })
        .then(r =>  r.json().then(status => {
            console.log("status", status)
        }));
        return false;
    },
    false,
);

document.getElementById("load").addEventListener(
    "click",
    function (event) {
        event.preventDefault();

        fetch("/deck-designer-io")
        .then(r =>  r.json().then(code => {
            console.log("loaded code", code)
            // remove old canvas
            cleanElement(DECK_ELEMID)
            // load stage
            stage = Konva.Node.create(JSON.stringify(code), DECK_ELEMID);
            console.log("layers", stage.getLayers())
            // restore layers
            stage.getLayers().forEach( (layer) => {
                switch(layer.name()) {
                case "background":
                    background_layer = layer;
                    console.log("background set", layer)
                    break;
                case "interaction":
                    interaction_layer = layer;
                    console.log("interaction set", layer, layer.getChildren())
                    break;
                }
            });
            add_background();
            add_transformer();
            // reinstall event handlers for each object
            // label_editor for text, simple transform for rectangles and circles.
            stage.getLayers().forEach( (layer) => {
                // console.log("layer", layer)
                if (layer.name() == "background") {
                    console.log("skipping ", layer.name())
                    return;
                }
                layer.getChildren().forEach( (group) => {
                    // console.log("group", group)
                    if (group instanceof Konva.Transformer) {
                        // console.log("skipping transformer", group.name())
                        return;
                    }
                    if (group instanceof Konva.Group) {
                        let this_shape = false;
                        group.getChildren().forEach( (shape) => {
                            // console.log("shape", shape)
                            if (["Rect", "Circle"].indexOf(shape.className) > -1) {
                                this_shape = shape
                            }
                        });
                        if (this_shape === false) {
                            console.log("cannot find shape Rect or Circle in group")
                        }
                        group.getChildren().forEach( (shape) => {
                            // console.log("shape", shape)
                            if (["Rect", "Circle"].indexOf(shape.className) > -1) {
                                this_shape = shape
                                shape.on("dblclick", function () {
                                    transformer.nodes([shape]);
                                });
                                // console.log("installed transformer", shape.name())
                            } else if (["Text"].indexOf(shape.className) > -1) {
                                shape.on("dblclick", function () {
                                    label_editor(stage, shape, this_shape);
                                });
                                // console.log("installed label_editor", shape.name())
                            }
                        });
                    } else {
                        console.log("not a group", group.className)   
                    }
                });
            });
        }));
        return false;
    },
    false,
);
</script>
</body>
</html>