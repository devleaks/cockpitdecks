<!DOCTYPE html>
<html>
<head>
    <title>Cockpitdecks - Deck Designer</title>
    <meta name="apple-mobile-web-app-capable" content="yes">
<style type="text/css">
body {
    width: 100%;
    height: 100%;
    margin: 0;
    padding: 0;
    font-family: sans-serif;
}

.deck {
    width: inherit;
    height: inherit;
    display: block;
    margin: 0;
    padding: 0;
}
</style>
</head>
<body>
    <div id="deck" class="deck"></div>
    <button id="butrect">Button (rect)</button>
    <button id="butround">Button (round)</button>
    <button id="encoder">Encoder</button>
    <button id="hardware">Hardware</button>
    <button id="save">Save</button>
    <button id="load">Load</button>
<script src="/assets/js/konva.js" type="text/javascript"></script>
<script src="/assets/js/deck-designer.js" type="text/javascript"></script>
<script type="text/javascript">
//
//
// Konva layout set up and initialisation
//
// create and add <div id="deck"></div> with proper styling, add to document
const DEBUG = false
const DECK_ELEMID = "deck"
const DECK_BACKGROUND_IMAGE_PATH = "/assets/decks/images/"

var deck_elem = document.getElementById(DECK_ELEMID);

// create stage
var stage = new Konva.Stage({
    container: DECK_ELEMID,
    width: window.innerWidth,
    height: window.innerHeight,
});

// create layers to cleanly separate content by function
var background_layer = new Konva.Layer({name: "background"});   // Background image or iniform color
var hardware_layer = new Konva.Layer({name: "hardware"});       // Where Cockpitdecks draws its icons/images
var interaction_layer = new Konva.Layer({name: "interaction"}); // Shapes with events attached to it

// add the layer to the stage
stage.add(background_layer);
stage.add(hardware_layer);
stage.add(interaction_layer);

var transformer;
//
// Utility function
//
function add_transformer() {
    transformer = new Konva.Transformer({rotateEnabled: false, ignoreStroke: true});
    interaction_layer.add(transformer);
    console.log("transformer added")
}

// Add background image and resize deck around it.
// Resize window as well. Cannot get rid of top bar... (adds 24px)
function add_background() {
    const extra_space = 150;

    let deckImage = new Image();
    deckImage.onerror = function() {
        console.log("cannot load background image");
    }
    deckImage.onload = function () {
        let deckbg = new Konva.Image({
            x: 0,
            y: 0,
            image: deckImage
        });
        stage.width(deckImage.naturalWidth);
        stage.height(deckImage.naturalHeight);
        window.resizeTo(deckImage.naturalWidth, deckImage.naturalHeight + extra_space);
        background_layer.add(deckbg);

        let background_interactor = new Konva.Rect({
            x: 0,
            y: 0,
            width: deckImage.naturalWidth,
            height: deckImage.naturalHeight,
            name: "background"
        });
        background_interactor.on("click", function () {
            transformer.nodes([]);
        });
        background_layer.add(background_interactor);
        background_layer.moveToBottom();
    };

    deckImage.src = DECK_BACKGROUND_IMAGE_PATH + "{{background_image}}";
    console.log("background added")
}

function cleanElement(el) {
    while(el.firstChild){
        el.removeChild(el.firstChild);
    }
}

//
// Main
//
add_background()
add_transformer()

deck_elem.tabIndex = 1;
deck_elem.focus();
deck_elem.addEventListener("keydown", function (e) {
    if (e.key == "Delete") {
        s = transformer.nodes()  // handles don't disappear?
        if (s.length > 0) {
            s.forEach( (x) => { x.getParent().destroy() });
        }
        transformer.nodes([]);
    }
});

//
// Interactors
//
const SIZE = 50
const INITIAL_POSITION = {x: 100, y: 100}
const LABEL_SIZE = 14

function label_editor(that_stage, label) {
    // https://konvajs.org/docs/sandbox/Editable_Text.html

    // create textarea over canvas with absolute position

    // first we need to find position for textarea
    // how to find it?

    // at first lets find position of text node relative to the stage:
    let textPosition = label.getAbsolutePosition();

    // then lets find position of stage container on the page:
    let stageBox = that_stage.container().getBoundingClientRect();

    // so position of textarea will be the sum of positions above:
    let areaPosition = {
      x: stageBox.left + textPosition.x,
      y: stageBox.top + textPosition.y,
    };

    // create textarea and style it
    let textarea = document.createElement("textarea");
    document.body.appendChild(textarea);

    textarea.value = label.text();
    textarea.style.position = "absolute";
    textarea.style.top = areaPosition.y + "px";
    textarea.style.left = areaPosition.x + "px";
    textarea.style.width = label.width();

    textarea.focus();

    textarea.addEventListener("keydown", function (e) {
        // hide on enter
        if (e.key == "Enter") {
            label.text(textarea.value);
            // shape.name(textarea.value);
            // group.name(textarea.value);
            document.body.removeChild(textarea);
        }
    });
}


function add_label(shape) {
    const INIT_TEXT = "shape name";
    let x = shape.x();
    let y = shape.y();
    if (shape instanceof Konva.Circle) {
        x -= shape.radius()
        y -= shape.radius()
    }
    let label = new Konva.Text({
        x: x,
        y: y - LABEL_SIZE - 2,
        text: INIT_TEXT,
        fontSize: LABEL_SIZE,
        fontFamily: "Helvetica",
        fill: "white",
      });

    let group = new Konva.Group({name: INIT_TEXT, draggable: true})
    group.add(shape);
    group.add(label);

    shape.on("dblclick", function () {
        transformer.nodes([shape]);
    });

    label.on("dblclick dbltap", () => {
        label_editor(stage, label);
    });
    return group;
}

document.getElementById("hardware").addEventListener(
    "click",
    function (event) {
        event.preventDefault();

        let shape = new Konva.Rect({
            x: INITIAL_POSITION.x,
            y: INITIAL_POSITION.y,
            width: SIZE,
            height: SIZE,
            cornerRadius: 0,
            stroke: "#0000ff",
            strokeWidth: 1,
            strokeScaleEnabled: false,
            name: "hardware"
        });

        hardware_layer.add(add_label(shape));
    },
    false,
);

document.getElementById("butrect").addEventListener(
    "click",
    function (event) {
        event.preventDefault();
        let shape = new Konva.Rect({
            x: INITIAL_POSITION.x,
            y: INITIAL_POSITION.y,
            width: SIZE,
            height: SIZE,
            cornerRadius: 4,
            stroke: "#00ff00",
            strokeWidth: 1,
            strokeScaleEnabled: false,
            name: "button"
        });

        shape.on("dblclick", function () {
            transformer.nodes([shape]);
        });

        interaction_layer.add(add_label(shape));
    },
    false,
);

document.getElementById("butround").addEventListener(
    "click",
    function (event) {
        event.preventDefault();
        let shape = new Konva.Circle({
            x: INITIAL_POSITION.x,
            y: INITIAL_POSITION.y,
            radius: Math.floor(SIZE / 2),
            stroke: "#00ff00",
            strokeWidth: 1,
            strokeScaleEnabled: false,
            name: "button"
        });

        shape.on("dblclick", function () {
            transformer.nodes([shape]);
        });

        interaction_layer.add(add_label(shape));
    },
    false,
);

document.getElementById("encoder").addEventListener(
    "click",
    function (event) {
        event.preventDefault();
        let shape = new Konva.Circle({
            x: INITIAL_POSITION.x,
            y: INITIAL_POSITION.y,
            radius: Math.floor(SIZE / 2),
            stroke: "yellow",
            strokeWidth: 1,
            strokeScaleEnabled: false,
            name: "encoder"
        });

        shape.on("dblclick", function () {
            transformer.nodes([shape]);
        });

        interaction_layer.add(add_label(shape));
    },
    false,
);

document.getElementById("save").addEventListener(
    "click",
    function (event) {
        event.preventDefault();
        code = stage.toJSON()
        console.log("saving code", code)

        fetch("/deck-designer-io", {
          method: "POST",
          headers: {"Content-Type": "application/json"}, 
          body: code
        })
        .then(r =>  r.json().then(status => {
            console.log("status", status)
        }));
        return false;
    },
    false,
);

document.getElementById("load").addEventListener(
    "click",
    function (event) {
        event.preventDefault();

        fetch("/deck-designer-io")
        .then(r =>  r.json().then(code => {
            console.log("loaded code", code)
            // remove old canvas
            cleanElement(DECK_ELEMID)
            // load stage
            stage = Konva.Node.create(JSON.stringify(code), DECK_ELEMID);
            console.log("layers", stage.getLayers())
            // restore layers
            stage.getLayers().forEach( (layer) => {
                switch(layer.name()) {
                case "background":
                    background_layer = layer;
                    console.log("background set", layer)
                    break;
                case "hardware":
                    hardware_layer = layer;
                    console.log("hardware set", layer, layer.getChildren())
                    break;
                case "interaction":
                    interaction_layer = layer;
                    console.log("interaction set", layer, layer.getChildren())
                    break;
                }
            });
            add_background();
            add_transformer();
            // reinstall event handlers for each object
            stage.getLayers().forEach( (layer) => {
                console.log("layer", layer)
                if (layer.name() == "background") {
                    console.log("skipping ", layer.name())
                    return;
                }
                layer.getChildren().forEach( (group) => {
                    console.log("group", group)
                    if (group instanceof Konva.Transformer) {
                        console.log("skipping transformer", group.name())
                        return;
                    }
                    if (group instanceof Konva.Group) {
                        group.getChildren().forEach( (shape) => {
                            console.log("shape", shape)
                            if (["Rect", "Circle"].indexOf(shape.className) > -1) {
                                shape.on("dblclick", function () {
                                    transformer.nodes([shape]);
                                });
                                console.log("installed transformer", shape.name())
                            } else if (["Text"].indexOf(shape.className) > -1) {
                                shape.on("dblclick", function () {
                                    label_editor(stage, shape);
                                });
                                console.log("installed label_editor", shape.name())
                            }
                        });
                    } else {
                        console.log("not a group", group.className)   
                    }
                });
            });
        }));
        return false;
    },
    false,
);


class MyLabel extends Konva.Text {
    // Represent a simply rectangular key

    constructor(config, container) {

        let corner_radius = 0
        if (checkNested(config, OPTIONS, OPT_CORNER_RADIUS)) {
            corner_radius = parseInt(config.options[OPT_CORNER_RADIUS])
        }

        super({
            x: config.position[0],
            y: config.position[1],
            width: config.dimension[0],
            height: config.dimension[1],
            cornerRadius: corner_radius,
            stroke: USER_PREFERENCES.highlight,
            strokeWidth: 1,
            draggable: EDITOR_MODE
        });
    }
}

</script>
</body>
</html>