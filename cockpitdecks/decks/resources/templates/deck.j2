<!DOCTYPE html>
<html>
<head>
    <title>Cockpitdecks - {{ deck.name }} </title>
<style type="text/css">
body {
    width: 100%;
    height: 100%;
    margin: 0;
    padding: 0;
    font-family: sans-serif;
}
</style>
</head>
<body>
<script src="/assets/js/konva.js" type="text/javascript"></script>
<script src="/assets/js/buttons.js" type="text/javascript"></script>
<script type="text/javascript">
//
//
// Konva layout set up and initialisation
//
// create and add <div id="deck"></div> with proper styling, add to document
const DEBUG = false

DECK_ELEMID = "deck"

var deck_elem = document.createElement("div");
deck_elem.setAttribute("id", DECK_ELEMID);
deck_elem.setAttribute("width", "inherit");
deck_elem.setAttribute("height", "inherit");
deck_elem.setAttribute("display", "block");
deck_elem.setAttribute("padding", 0);
deck_elem.setAttribute("marging", 0);
document.getElementsByTagName("body")[0].appendChild(deck_elem)

// create stage
var stage = new Konva.Stage({
    container: DECK_ELEMID,
    width: window.innerWidth,
    height: window.innerHeight,
});

// create layers to cleanly separate content by function
var background_layer = new Konva.Layer({name: "background"});   // Background image or iniform color
var hardware_layer = new Konva.Layer({name: "hardware"});       // Where Cockpitdecks draws its icons/images
var interaction_layer = new Konva.Layer({name: "interaction"}); // Shapes with events attached to it
var image_layer = new Konva.Layer({name: "image"});             // Where Cockpitdecks draws its icons/images

// add the layer to the stage
stage.add(background_layer);
stage.add(hardware_layer);
stage.add(image_layer);
stage.add(interaction_layer);

//
//
// Deck creation & installation
//
// Transfer from Cockpitdecks through Jinja2, nice output
const DECK = {{ deck|tojson(indent=2) }};

deck = new Deck(DECK, stage);  // we need to pass the div element to style it (cursor)

// add the layer to the deck
deck.set_background_layer(background_layer);
deck.set_interaction_layer(interaction_layer);
deck.set_hardware_image_layer(hardware_layer);
deck.set_image_layer(image_layer);

if (DEBUG) {
    var debug_elem = document.createElement("div");
    var code_elem = document.createElement("pre");
    code_elem.textContent = JSON.stringify(DECK, null, 2)
    debug_elem.setAttribute("id", "debug");
    debug_elem.appendChild(code_elem)
    document.getElementsByTagName("body")[0].appendChild(debug_elem)
}
//
//
// WebSocket initialisation and setup
//
if (DECK.ws_url == undefined) {
    alert("No WebSocket address. Please start Cockpitdecks first.")
}

var ws = new WebSocket(DECK.ws_url);

ws.onopen = (event) => {
    console.log("connection opened", DECK.ws_url);
    // sends its name on new connection to help identify
    sendCode(DECK.name, 1);
};

// RECEIVE function
//
// Receives messages from Cockpitdecks and take action on this deck
ws.onmessage = (event) => {
    // console.log("data received");
    var data = JSON.parse(event.data);
    console.log("code received", data.code, data.meta);
    if (data.code == 0) {
        deck.set_key_image(data.key, data.image, image_layer);
    } else if (data.code == 1) {
        console.log("received initialisation code, requesting page reload", data.code);
        sendCode(DECK.name, 1);
    } else {
        console.log("unhandled code received, uninterpreted", data.code);
    }
};

// OTHER HANDLERS
//
ws.close = (event) => {
    sendCode(DECK.name, 2); // tries at least...
    console.log("connection closed");
};

ws.error = (event) => {
    console.log("WebSocket error", event);
};

// SEND functions (global, to be used by decks, etc.)
//
// Send code to Cockpitdecks
function sendCode(deck, code) {
    payload = {"code": code, "deck": deck};
    var message = JSON.stringify(payload);
    ws.send(message);
    console.log("sent code", deck, code);
}

//
// Send event to Cockpitdecks
function sendEvent(deck, key, value, data) {
    if (key == -1) {
        console.log("probably not clicked on a key");
    } else {
        payload = {"code": 0, "deck": deck, "key": key, "event": value, "data": data};
        var message = JSON.stringify(payload);
        ws.send(message);
        console.log("sent event", message);
    }
}
</script>
</body>
</html>