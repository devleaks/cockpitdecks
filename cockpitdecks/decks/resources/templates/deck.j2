<!DOCTYPE html>
<html>
<head>
    <title>Cockpitdecks - {{ deck.name }} </title>
    <meta name="apple-mobile-web-app-capable" content="yes">
<style type="text/css">
/* dark grey on light blue */
:root {
    --font-color: #424242;
    --bg-color: #A8B7E6;
}
/* light orange on dark grey */
[data-theme="dark"] {
    --font-color: #FECC66;
    --bg-color: #333333;
}

body {
    width: 100%;
    height: 100%;
    margin: 0;
    padding: 0;
    font-family: sans-serif;
}

#deck {
  position: relative;
}

#buttonWrapper {
  position: absolute;
  width: 86px;
  top: 2px;
  right: 2px;
}

input[type="button"] {
  padding: 2px;
  width: 26px;
  border: 1px solid var(--bg-color);
  margin: 1px;
  border-radius: 6px;
  color: var(--font-color);
  background-color: var(--bg-color);
}
</style>
</head>
<body>

<script src="/assets/js/konva.js" type="text/javascript"></script>
<script src="/assets/js/deck.js" type="text/javascript"></script>
<script type="text/javascript">
//
//
// Load deck info (contains options, etc.)
//
const DECK = {{ deck|tojson(indent=2) }};
const DECK_TYPE_DESCRIPTION = "deck-type-flat"

const DEBUG = DECK[DECK_TYPE_DESCRIPTION].debug != undefined ? DECK[DECK_TYPE_DESCRIPTION].debug : false;
const ZOOM = DECK[DECK_TYPE_DESCRIPTION].zoom != undefined ? DECK[DECK_TYPE_DESCRIPTION].zoom : true;
const DARK = DECK[DECK_TYPE_DESCRIPTION].background.alternate != undefined
const HAS_BACKGROUND_IMAGE = DECK[DECK_TYPE_DESCRIPTION].background.image != undefined
//
//
// Konva layout set up and initialisation
//
// create and add <div id="deck"></div> with proper styling, add to document

const DECK_ELEMID = "deck"

var deck_elem = document.createElement("div");
deck_elem.setAttribute("id", DECK_ELEMID);
deck_elem.setAttribute("width", "inherit");
deck_elem.setAttribute("height", "100%");
deck_elem.setAttribute("display", "block");
deck_elem.setAttribute("padding", 0);
deck_elem.setAttribute("marging", 0);
document.getElementsByTagName("body")[0].appendChild(deck_elem)

var btns_elem = document.createElement("div");
btns_elem.setAttribute("id", "buttonWrapper");
btns_elem.setAttribute("data-theme", "light");

// create stage
var stage = new Konva.Stage({
    container: DECK_ELEMID,
    width: window.innerWidth,
    height: window.innerHeight,
});

var original_width = window.innerWidth
var original_height = window.innerHeight
var original_ratio = window.innerWidth / window.innerHeight
console.log("ratio", window.innerWidth, window.innerHeight, original_ratio)

if (ZOOM) {
    var scale = 1
    var scale_delta = 0.1
    var SIZE_MIN = 300  // px
    var SIZE_MAX = 2000  // px

    function rescale() {
        a = Math.min(original_width * scale, original_height * scale)
        if (a < SIZE_MIN) {
            console.log("too small", a, scale)
            scale = scale + scale_delta
            return
        }
        a = Math.max(original_width * scale, original_height * scale)
        if (a > SIZE_MAX) {
            console.log("too large", a, scale)
            scale = scale - scale_delta
            return
        }
        stage.scale({x: scale, y: scale});
        let resize = Math.round(scale*100) + "% " + Math.round(scale*100) + "%";
        console.log("scale", stage.scale())
        deck_elem.style.height = Math.round(original_height * scale) + "px";
        window.resizeTo(original_width * scale, original_height * scale);
    }

    var plus_elem = document.createElement("input");
    plus_elem.setAttribute("type", "button");
    plus_elem.setAttribute("id", "plus");
    plus_elem.setAttribute("value", "+");
    plus_elem.addEventListener("click", function() {
        scale = scale + scale_delta
        rescale();
    }, false);

    var minus_elem = document.createElement("input");
    minus_elem.setAttribute("type", "button");
    minus_elem.setAttribute("id", "minus");
    minus_elem.setAttribute("value", "-");
    minus_elem.addEventListener("click", function() {
        scale = scale - scale_delta
        rescale();
    }, false);

    btns_elem.appendChild(plus_elem)
    btns_elem.appendChild(minus_elem)
}

// create layers to cleanly separate content by function
var background_layer = new Konva.Layer({name: "background"});   // Background image or iniform color
var hardware_layer = new Konva.Layer({name: "hardware"});       // Where Cockpitdecks draws its icons/images
var interaction_layer = new Konva.Layer({name: "interaction"}); // Shapes with events attached to it
var image_layer = new Konva.Layer({name: "image"});             // Where Cockpitdecks draws its icons/images

// add the layer to the stage
stage.add(background_layer);
stage.add(hardware_layer);
stage.add(image_layer);
stage.add(interaction_layer);

//
//
// Deck creation & installation
//
// Transfer from Cockpitdecks through Jinja2, nice output
function getQueryVariable(variable) {
  var vars = query.split("&");
  for (var i=0;i<vars.length;i++) {
    var pair = vars[i].split("=");
    if (pair[0] == variable) {
      return pair[1];
    }
  } 
  alert('Query Variable ' + variable + ' not found');
}

// assumes location of type host:8080/deck/deckname
// if (HAS_BACKGROUND_IMAGE) ..
const BACKGROUND_IMAGE_PATH = window.location.pathname.replace("/deck/", "/deck-bg/")
deck_elem.style.backgroundImage = "url("+BACKGROUND_IMAGE_PATH+")";
deck_elem.style.backgroundRepeat = "no-repeat";
deck_elem.style.backgroundSize = "100% auto";
// else uniform color

deck = new Deck(DECK, stage);  // we need to pass the div element to style it (cursor)

// add the layer to the deck
deck.set_background_layer(background_layer);
deck.set_interaction_layer(interaction_layer);
deck.set_hardware_image_layer(hardware_layer);
deck.set_image_layer(image_layer);

// does it have a dark image (later: check for dark background color as well)
if (DARK) {
    var dark_mode = DECK.dark_mode == undefined ? false : DECK.dark_mode // start light, may be wrong?
    var dark_elem = document.createElement("input");
    dark_elem.setAttribute("type", "button");
    dark_elem.setAttribute("id", "dark");
    dark_elem.setAttribute("value", dark_mode ? "☀" : "☾"); // ☾ or ☀
    dark_elem.addEventListener("click", function() {
        dark_mode = ! dark_mode;
        dark_elem.setAttribute("value", dark_mode ? "☀" : "☾" );
        btns_elem.setAttribute("data-theme", dark_mode ? "dark" : "light" );
        let bg_image = dark_mode ? BACKGROUND_IMAGE_PATH + "/alternate/night" : BACKGROUND_IMAGE_PATH
        console.log("dark", dark_mode, bg_image)
        deck_elem.style.backgroundImage = "url("+bg_image+")";
    }, false);
    btns_elem.appendChild(dark_elem)

    console.log("dark init", dark_mode)
    if (dark_mode) {
        deck_elem.style.backgroundImage = "url(" + BACKGROUND_IMAGE_PATH + "/alternate/night)";
    }
}

if (btns_elem.firstChild) { // if it has at least one child
    document.getElementsByTagName("body")[0].appendChild(btns_elem)
}

// function win_resize() {
//     console.log(window.innerWidth, window.innerHeight);
//     let scale = original_width / window.innerWidth
//     console.log("new scale", scale)
//     stage.scale({x: scale, y: scale});
//     let resize = Math.round(scale*100) + "% " + Math.round(scale*100) + "%";
//     deck_elem.style.height = Math.round(original_height * scale) + "px";
// }
// window.addEventListener("resize", win_resize);


if (DEBUG) {
    var debug_elem = document.createElement("div");
    var code_elem = document.createElement("pre");
    code_elem.textContent = JSON.stringify(DECK, null, 2)
    debug_elem.setAttribute("id", "debug");
    debug_elem.appendChild(code_elem)
    document.getElementsByTagName("body")[0].appendChild(debug_elem)
}
//
//
// WebSocket initialisation and setup
//
const WS_CONNECT_RETRY_TIME = 5000

if (DECK.ws_url == undefined) {
    console.error("No WebSocket address. Please start Cockpitdecks first.")
}

function connect() {
    console.log("WebSocket trying every " + Math.round(WS_CONNECT_RETRY_TIME/1000, 0) + " seconds...");
    socket = new WebSocket(DECK.ws_url);

    socket.onopen = (event) => {
        console.log("WebSocket opened", DECK.ws_url);
        ws = socket;
        try {
            if (ws) {
                sendCode(DECK.name, 1);
                // console.log("sent code 1 to", DECK.name)
                // sends its name on new connection to help identify
            }
        } catch (error) {
            console.error("onopen", error)
        }
    };

    socket.onmessage = (event) => {
        // console.log("data received");
        var data = JSON.parse(event.data);
        // console.log("code received", data.code, data.meta);
        if (data.code == 0) {
            deck.set_key_image(data.key, data.image);
        } else if (data.code == 2) {
            deck.play_sound(data.sound, data.type);
        } else if (data.code == 8) {
            console.log("received initialisation code, requesting page reload", data.code);
            window.location.reload()
            // sendCode(DECK.name, 1);
        } else if (data.code == 99) {
            // console.log("received ping", data.code);
            ;
        } else {
            console.log("unhandled code received, uninterpreted", data.code);
        }
    };

    socket.onclose = (event) => {
        // console.log("WebSocket closed");
        ws = false;
        setTimeout(function() {
            connect();
        }, WS_CONNECT_RETRY_TIME);
    };

    socket.onerror = (event) => {
        // console.error("WebSocket error", event);
        if (socket) {
            // console.log("closing WebSocket..");
            socket.close()
        }
    };
}

var ws;
connect();

// OTHER HANDLERS
//

// SEND functions (global, to be used by decks, etc.)
//
// Send code to Cockpitdecks
function sendCode(deck, code) {
    try {
        if (ws) {
            ws.send(JSON.stringify({"code": code, "deck": deck}));
            // console.log("sent code", deck, code);
        } else {
            console.log("sendCode: no websocket");
        }
    } catch (error) {
        console.error("sendCode", error)
    }
}

//
// Send event to Cockpitdecks
function sendEvent(deck, key, value, data) {
    try {
        if (ws) {
            ws.send(JSON.stringify({"code": 0, "deck": deck, "key": key, "event": value, "data": data}));
            //console.log("sent event", {"code": 0, "deck": deck, "key": key, "event": value, "data": data});
        } else {
            console.log("sendEvent: no websocket");
        }
    } catch (error) {
        console.error("sendEvent", error)
    }
}
</script>
</body>
</html>